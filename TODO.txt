Allow for changing of Names/Nicknames of Stats/Skills.

Allow for changing of parent skills of Stats/Skills.
  Click/drag to reassign skill parent.
  Retype stat parents to modify

Have some method for modifying resistances.

Resize resistance frame on adding resistances.
  Currently, some resistances will not be shown because the frame is too small.

Improve saved character text file appearance

Inventory
  Implement multiplicative bonuses

Modified syntax for locating relatives.
  'Parent Skill/Child Skill', with 'Parent Skill/' being optional.
  Avoids ambiguity of 'Riding/Horse' with 'Animal Handling/Horse'

Have each value type automatically add the type into the Options list if not specified.
  Otherwise, when saving, then reloading, guaranteed that values won't be lost.

Fix reading of Miscellaneous values when empty.
  Currently, makes a Value with no options, instead of making a default emptystring for the names.

Implement StatBonus, ParentBonus, ItemBonus in Value
   Add extra hiden-by-default columns in SkillStore, StatStore to hold these values.

Have Ctrl-N,O,S start New, Open, and Save commands.

Removing a bonus from an item does not update skills that were children, but are no longer.
  Ex. "Dagger+5, Linguistics-2" becomes "Dagger+5" would not remove the -2 from Linguistics.
  Fix this.

Have a "Print to PDF" option.
  Should generate a latex file, then compile it.

Make Character.DPallowed and Character.StatPointsAllowed be configurable for multiple rules.

Make the stat increase scheme be configurable.

Experiment with having text boxes update only on losing focus or receiving "Enter"

Add a "Disabled" parameter to items,
  allowing for item-bonuses to be temporarily disabled.
  This could be used, for example, if an item is broken, but can be repaired.

Adjust EventHandler's Execute function so it will not call the same function twice.

Have explicit "Fudge-factor mode" and "Normal mode"
  In Normal mode, cannot adjust things that should not be adjustable.
    No changing of stat values other than through levelling up.
    No changing of skill ranks other than through levelling up.
    No changing of potential stat value whatsoever.
  In "Fudge-factor mode" ("GM Mode"?), can adjust any value however you feel like it.

Make a WeaponsView to hold the Weapon Order view.
  Should subclass SkillListStore.
  Should override UpdateAll, OnValueAdd, OnValuChange, and OnValueRemove
    to only include skills with the 'Weapon' option.
  Alternatively, rework those functions in ValueListStore to have a IsValid() function.
  Would by default return True, can overload it in subclasses.
  Can't use a TreeModelFilter, since the ordering shouldn't affect the ordering in the Skill page.
In Character, when loading profession, should keep "Combat Training #" skills separate.
  If a skill has a 'Weapon #' option, then it will load the Character's "Combat Training #" costs.
  No, bad idea.
  Then I would need to have the Character have extra non-Value information.
Have non-listed values called "Combat Training #" that are parents of the "Weapon" skills?
  Would require lots of unlinking and relinking when reordering skills.
Character remembers "Combat Training #" skills, can use to overwrite the Weapon skills.
  Character.Weapons(*args), where each argument is a weapon skill, in order.
  Each weapon cost is then loaded directly into the skill, minimizing updates needed.
  Should have Character store the list of weapon skills, so that Character.Weapons(*args)
   can be called again at the end of LoadProfession()
  Rats, I might need to put it into the save file anyways,
    since otherwise GM-mode which should be able to change the weapon ordering won't be able to.
So, best idea so far:
  Values with a 'Weapon' tag get the tag modified to 'Weapon #1', 'Weapon #2', etc.
  This tag indicates that the self.char.WeaponCosts[i] should be used at costs.
  Save this to the save format somehow.

Add syntax to have runtime-specified skill bonus on a per-skill basis.
  Add a tag "Progression-filename.txt" in the options.
  Make Character have a defaultdict of str->Table.
  On unknown skill progression, attempt to load new table from file.
  This will allow for using RMFRP skill progressions.

Better escaping characters for save format.
  Right now, things would choke if () {} [] <> : # , are used in names, descriptions.

Add "Unsaved, are you sure?" dialogs to "New" and "Open" menus.
