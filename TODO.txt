Allow for changing of Names/Nicknames of Stats/Skills.

Allow for changing of parent skills of Stats/Skills.
  Click/drag to reassign skill parent.
  Retype stat parents to modify

Have some method for modifying resistances.

Resize resistance frame on adding resistances.
  Currently, some resistances will not be shown because the frame is too small.

Improve saved character text file appearance

Inventory
  Implement multiplicative bonuses

Modified syntax for locating relatives.
  'Parent Skill/Child Skill', with 'Parent Skill/' being optional.
  Avoids ambiguity of 'Riding/Horse' with 'Animal Handling/Horse'

Have each value type automatically add the type into the Options list if not specified.
  Otherwise, when saving, then reloading, guaranteed that values won't be lost.

Fix reading of Miscellaneous values when empty.
  Currently, makes a Value with no options, instead of making a default emptystring for the names.

Implement StatBonus, ParentBonus, ItemBonus in Value
   Add extra hiden-by-default columns in SkillStore, StatStore to hold these values.

Have Ctrl-N,O,S start New, Open, and Save commands.

Removing a bonus from an item does not update skills that were children, but are no longer.
  Ex. "Dagger+5, Linguistics-2" becomes "Dagger+5" would not remove the -2 from Linguistics.
  Fix this.

Have a "Print to PDF" option.
  Should generate a latex file, then compile it.

Make Character.DPallowed and Character.StatPointsAllowed be configurable for multiple rules.

Make the stat increase scheme be configurable.

Experiment with having text columns update only on losing focus

Add a "Disabled" parameter to items,
  allowing for item-bonuses to be temporarily disabled.
  This could be used, for example, if an item is broken, but can be repaired.

Improve GUI-backend communication.
  Currently, the reading of values from the backend can cause additional backend changes,
   such as when reloading the active stat.
  This can cause infinite loops that become hard to diagnose.
  To fix this, should make two big changes.
  1. Have EventHandler collect the signals to be run,
      but not call them until an "Execute" function is called.
     This will allow for delayed updating of the GUI.
  2. Have a MainWindow.Update() function, to be called when the GUI is to be updated from the backend.
     Should first disable all the signals from the GUI.
          object.handler_block(handler_id)
     Then, should call self.char.Events.Executes()  (Probably through a self.char.Update())
     Finally, re-enable the signals from the GUI.
          object.handler_unblock(handler_id)
  This way, the GUI will only be updated at specified times.
